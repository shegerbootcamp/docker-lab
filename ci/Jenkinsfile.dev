pipeline {
    agent any
    
    tools {
        jfrog 'jfrog-cli'
    }

    parameters {
        string(name: 'ProjectKey', defaultValue: 'petclinic', description: 'SonarQube project key')
        string(name: 'ProjectName', defaultValue: 'petclinic', description: 'SonarQube project name')
        string(name: 'SonarHostUrl', defaultValue: 'http://192.168.92.182:9000', description: 'SonarQube server URL')
        string(name: 'SlackChannel', defaultValue: '#jenkins-build-sonar', description: 'Slack channel to send notifications')
        string(name: 'SlackTokenCredentialId', defaultValue: 'SLACK-TOKEN', description: 'Slack token credential ID')
        string(name: 'AppPort', defaultValue: '8081', description: 'Port to run the application')
    }

    environment {
        DOCKER_IMAGE_NAME = "shegerlab2024.jfrog.io/petclinic/petclinic:${env.BUILD_NUMBER}" // Using build number for Docker image tag
    }

    stages {
        // Previous stages omitted for brevity

        stage('Docker Pull & Deploy') {
            steps {
                script {
                    // Stop any existing container on the same port
                    sh """
                    docker ps -q --filter "name=petclinic" | grep -q . && docker stop petclinic && docker rm petclinic || true
                    """

                    // Pull the Docker image and run the container
                    sh """
                    docker pull $DOCKER_IMAGE_NAME
                    docker run -d --name petclinic -p ${params.AppPort}:8081 $DOCKER_IMAGE_NAME
                    """
                }
            }
        }

        stage('Deploy To QA') {
            steps {
                script {
                    // Invoke Ansible playbook with the appropriate variables
                    sh """
                    ansible-playbook -i ${ansibleInventory} ${ansiblePlaybook} \
                    --extra-vars "docker_image_name=${DOCKER_IMAGE_NAME} app_port=${params.AppPort}"
                    """
                }
            }
        }
    }

    post {
        // Post actions omitted for brevity
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3')) // Keep 3 builds for 1 day
    }
}