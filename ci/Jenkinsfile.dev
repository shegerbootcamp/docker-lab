pipeline {
    agent {
        docker {
            image 'shegerbootcamp/jenkins-agent:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock' // Bind the Docker socket
        }
    }

    tools {
        jfrog 'jfrog-cli'
    }

    parameters {
        string(name: 'ProjectKey', defaultValue: 'petclinic', description: 'SonarQube project key')
        string(name: 'ProjectName', defaultValue: 'petclinic', description: 'SonarQube project name')
        string(name: 'SonarHostUrl', defaultValue: 'http://192.168.92.182:9000', description: 'SonarQube server URL')
        string(name: 'SlackChannel', defaultValue: '#jenkins-build-sonar', description: 'Slack channel to send notifications')
        string(name: 'SlackTokenCredentialId', defaultValue: 'SLACK-TOKEN', description: 'Slack token credential ID')
        string(name: 'AppPort', defaultValue: '8081', description: 'Port to run the application')
    }

    environment {
        DOCKER_IMAGE_NAME = "shegerlab2024.jfrog.io/petclinic/petclinic:${env.BUILD_NUMBER}" // Using build number for Docker image tag
        ansibleInventory = 'ansible/deployer/inventory.ini' // Path to your Ansible inventory file
        ansiblePlaybook = 'ansible/deployer/deployer.yml' // Path to your Ansible playbook
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'master', url: "https://github.com/shegerbootcamp/docker-lab.git"
            }
        }

        stage('Unit Test') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn test' // Run unit tests
                }
            }
        }

        stage('Sonar Static Code Analysis') {
            steps {
                dir('petclinic-app') {
                    withCredentials([string(credentialsId: 'jenkins-sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${params.ProjectKey} \
                            -Dsonar.projectName='${params.ProjectName}' \
                            -Dsonar.host.url=${params.SonarHostUrl} \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build Package') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn clean install -DskipTests=true' // Build the package without running tests
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("$DOCKER_IMAGE_NAME", 'petclinic-app')
                }
            }
        }

        stage('Scan and Push Docker Image') {
            steps {
                dir('petclinic-app/') {
                    jf 'docker scan $DOCKER_IMAGE_NAME' // Scan the Docker image for vulnerabilities
                    jf 'docker push $DOCKER_IMAGE_NAME' // Push the image to Artifactory
                }
            }
        }

        //stage('Remove Local Docker Image') {
        //    steps {
        //        script {
        //            sh "docker rmi $DOCKER_IMAGE_NAME" // Remove Docker image from Jenkins server / local
        //        }
        //    }
        //} ansible webserver -m ping -vvv

        stage('Ansible Test') {
            steps {
                script {
                    sh """
                    ansible -i ${ansibleInventory} web -m ping -vvv
                    """
                }
            }
        }

        stage('Deploy To QA') {
            steps {
                script {
                    sh """
                    ansible-playbook -i ${ansibleInventory} ${ansiblePlaybook} \
                     --extra-vars "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME} AppPort=${params.AppPort}"
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                // Publish JUnit test results and archive artifacts
                dir('petclinic-app') {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }

                // Notify on Slack about successful build
                slackSend(
                    channel: params.SlackChannel,
                    color: 'good',
                    message: "SUCCESS: ${env.JOB_NAME} build #${env.BUILD_NUMBER} - ${env.BUILD_URL}"
                )
            }
        }

        failure {
            script {
                // Notify on Slack about build failure
                slackSend(
                    channel: params.SlackChannel,
                    color: 'danger',
                    message: "FAILURE: ${env.JOB_NAME} build #${env.BUILD_NUMBER} - ${env.BUILD_URL}"
                )
            }
        }

        always {
            cleanWs() // Clean up the workspace after every build
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3')) // Keep 3 builds for 1 day
    }
}